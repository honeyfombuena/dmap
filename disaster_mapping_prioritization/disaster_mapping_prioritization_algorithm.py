# -*- coding: utf-8 -*-

"""
/***************************************************************************
 DisasterMappingPrioritization
                                 A QGIS plugin
 This plugin adds an algorithm to save attributes of selected layer as a CSV file
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-02-14
        copyright            : (C) 2023 by Open Mapping Hub Asia-Pacific
        email                : honey.fombuena@hotosm.org
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Open Mapping Hub Asia-Pacific'
__date__ = '2023-02-14'
__copyright__ = '(C) 2023 by Open Mapping Hub Asia-Pacific'


# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os
import inspect
from qgis.PyQt.QtGui import QIcon

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFileDestination)

from qgis.core import QgsProcessing
from qgis.core import QgsProcessingAlgorithm
from qgis.core import QgsProcessingMultiStepFeedback
from qgis.core import QgsProcessingParameterVectorLayer
from qgis.core import QgsProcessingParameterFile
from qgis.core import QgsProcessingParameterRasterLayer
from qgis.core import QgsProcessingParameterFeatureSink
from qgis.core import QgsProcessingParameterVectorDestination
from qgis.core import QgsProcessingParameterRasterDestination
import processing
import random
import os

class DisasterMappingPrioritizationAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(QgsProcessingParameterVectorLayer('adminboundary', 'Admin Boundary', types=[QgsProcessing.TypeVectorPolygon], defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer('microsoftbuildings', 'Base Buildings', types=[QgsProcessing.TypeVectorPolygon], defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer('osmbuildings', 'OSM Buildings', types=[QgsProcessing.TypeVectorPolygon], defaultValue=None))
        self.addParameter(QgsProcessingParameterFile('output_style', 'Output Style', behavior=QgsProcessingParameterFile.File, fileFilter='All Files (*.*)', defaultValue=None))
        self.addParameter(QgsProcessingParameterRasterLayer('riskdata', 'Risk Data', defaultValue=None))
        # self.addParameter(QgsProcessingParameterFeatureSink('MappingPriority', 'Mapping Priority', type=QgsProcessing.TypeVectorAnyGeometry, createByDefault=True, supportsAppend=True, defaultValue='C:/DMaP/Results.shp'))
        self.addParameter(QgsProcessingParameterFeatureSink('MappingPriority', 'Mapping Priority', type=QgsProcessing.TypeVectorAnyGeometry, createByDefault=True, supportsAppend=False, defaultValue='TEMPORARY_OUTPUT'))
            
        self.addParameter(
            QgsProcessingParameterVectorDestination(
                'TMP_OUTPUT_VECTOR'
                , "gpkg-tmp-vector"
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                'TMP_OUTPUT_RASTER'
                , "gpkg-tmp-raster"
            )
        )        
    def processAlgorithm(self, parameters, context, model_feedback):
        # Use a multi-step feedback, so that individual child algorithm progress reports are adjusted for the
        # overall progress through the model
        feedback = QgsProcessingMultiStepFeedback(30, model_feedback)
        results = {}
        outputs = {}

        iso_output_vector = self.parameterAsOutputLayer(parameters, 'TMP_OUTPUT_VECTOR', context)
        iso_output_raster = self.parameterAsOutputLayer(parameters, 'TMP_OUTPUT_RASTER', context)

        def create_rand_fname(type, name=None):
            if(type=="raster"):
                loc = iso_output_raster
            else:
                loc = iso_output_vector
            f_name = "{}/TMP_OUTPUT_{}_{}.gpkg".format(os.path.dirname(loc), str(random.randint(0, 1000)), name)
            if os.path.exists(f_name):
                create_rand_fname(type, name)
            else:
                return f_name
        
        # Fix geometries
        alg_params = {
            'INPUT': parameters['osmbuildings'],
            'METHOD': 1,  # Structure
            'OUTPUT': create_rand_fname("vector", "FixGeometries_step_1")
        }
        outputs['FixGeometries_osmbuildings'] = processing.run('native:fixgeometries', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
 
        feedback.setCurrentStep(1)
        if feedback.isCanceled():
            return {}

        # Create spatial index
        alg_params = {
            'INPUT': parameters['adminboundary']
        }
        outputs['CreateSpatialIndex_adminboundary'] = processing.run('native:createspatialindex', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
 
        feedback.setCurrentStep(2)
        if feedback.isCanceled():
            return {}

        # Create spatial index
        alg_params = {
            'INPUT': outputs['FixGeometries_osmbuildings']['OUTPUT']
        }
        outputs['CreateSpatialIndex_osmbuildings'] = processing.run('native:createspatialindex', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
 
        feedback.setCurrentStep(3)
        if feedback.isCanceled():
            return {}
        
    
        # r.null       
        alg_params = {
            '-c': False,
            '-f': False,
            '-i': False,
            '-n': False,
            '-r': False,
            'GRASS_RASTER_FORMAT_META': '',
            'GRASS_RASTER_FORMAT_OPT': '',
            'GRASS_REGION_CELLSIZE_PARAMETER': 0,
            'GRASS_REGION_PARAMETER': None,
            'map': parameters['riskdata'],
            'null': 0,
            'setnull': '',
            'output': create_rand_fname("raster", "rnull_step_4"),
            '--overwrite': True,
            "-o" : True,
        }
        
            
        outputs['Rnull'] = processing.run('grass7:r.null', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
 
        feedback.setCurrentStep(4)
        if feedback.isCanceled():
            return {}
  
        # Clip
        alg_params = {
            'INPUT': outputs['CreateSpatialIndex_osmbuildings']['OUTPUT'],
            'OVERLAY': parameters['adminboundary'],
            'OUTPUT': create_rand_fname("vector", "clip_step_5"),
        }
        outputs['Clip_osmbuildings'] = processing.run('native:clip', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
 
        feedback.setCurrentStep(5)
        if feedback.isCanceled():
            return {}
        import time

 
        # Create spatial index
        alg_params = {
            'INPUT': outputs['Clip_osmbuildings']['OUTPUT']
        }
        outputs['CreateSpatialIndex_osmbuildings'] = processing.run('native:createspatialindex', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
 
        feedback.setCurrentStep(6)
        if feedback.isCanceled():
            return {}
 
        # Fix geometries
        alg_params = {
            'INPUT': parameters['microsoftbuildings'],
            'METHOD': 1,  # Structure
            'OUTPUT': create_rand_fname("vector", "FixGeometries_step_7")
        }
        outputs['FixGeometries_microsoftbuildings'] = processing.run('native:fixgeometries', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
 
        feedback.setCurrentStep(7)
        if feedback.isCanceled():
            return {}

 

        # Raster pixels to polygons
        alg_params = {
            'FIELD_NAME': 'VALUE',
            'INPUT_RASTER': outputs['Rnull']['output'],
            'RASTER_BAND': 1,
            'OUTPUT': create_rand_fname("vector", "RasterPixelsToPolygons_step_8")
        }
        outputs['RasterPixelsToPolygons'] = processing.run('native:pixelstopolygons', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
 
        feedback.setCurrentStep(8)
        if feedback.isCanceled():
            return {}

        # Create spatial index
        alg_params = {
            'INPUT': outputs['FixGeometries_microsoftbuildings']['OUTPUT']
        }
        outputs['CreateSpatialIndex_microsoftbuildings'] = processing.run('native:createspatialindex', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
 
        feedback.setCurrentStep(9)
        if feedback.isCanceled():
            return {}

        # Clip
        alg_params = {
            'INPUT': outputs['CreateSpatialIndex_microsoftbuildings']['OUTPUT'],
            'OVERLAY': parameters['adminboundary'],
            'OUTPUT': create_rand_fname("vector", "Clip_step_10")
        }
        outputs['Clip_microsoftbuildings'] = processing.run('native:clip', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
 
        feedback.setCurrentStep(10)
        if feedback.isCanceled():
            return {}

        # Create spatial index
        alg_params = {
            'INPUT': outputs['RasterPixelsToPolygons']['OUTPUT'],
            'OUTPUT' : create_rand_fname("vector", "CreateSpatialIndex_step_11")
        }
        outputs['CreateSpatialIndex_riskdata'] = processing.run('native:createspatialindex', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
 
        
        feedback.setCurrentStep(11)
        if feedback.isCanceled():
            return {}

        # Fix geometries
        alg_params = {
            'INPUT': outputs['CreateSpatialIndex_riskdata']['OUTPUT'],
            'METHOD': 1,  # Structure
            'OUTPUT': create_rand_fname("vector", "FixGeometries_step_12")
        }
        outputs['FixGeometries_riskdata'] = processing.run('native:fixgeometries', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
 
        feedback.setCurrentStep(12)
        if feedback.isCanceled():
            return {}

        # Clip
        alg_params = {
            'INPUT': outputs['FixGeometries_riskdata']['OUTPUT'],
            'OVERLAY': parameters['adminboundary'],
            'OUTPUT': create_rand_fname("vector", "Clip_step_13")
        }
        outputs['Clip_riskdata'] = processing.run('native:clip', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
 
        feedback.setCurrentStep(13)
        if feedback.isCanceled():
            return {}

        # Create spatial index
        alg_params = {
            'INPUT': outputs['Clip_microsoftbuildings']['OUTPUT']
        }
        outputs['CreateSpatialIndex_microsoftbuildings_2'] = processing.run('native:createspatialindex', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
 
        feedback.setCurrentStep(14)
        if feedback.isCanceled():
            return {}

        # Create spatial index
        alg_params = {
            'INPUT': outputs['Clip_riskdata']['OUTPUT']
        }
        outputs['CreateSpatialIndex_riskdata_2'] = processing.run('native:createspatialindex', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
 
        feedback.setCurrentStep(15)
        if feedback.isCanceled():
            return {}

        # Clip
        alg_params = {
            'INPUT': outputs['CreateSpatialIndex_riskdata_2']['OUTPUT'],
            'OVERLAY': outputs['CreateSpatialIndex_microsoftbuildings_2']['OUTPUT'],
            'OUTPUT': create_rand_fname("vector", "Clip_step_16")
        }

        outputs['Clip_microsoft_risk'] = processing.run('native:clip', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
 
        feedback.setCurrentStep(16)
        if feedback.isCanceled():
            return {}

        # Clip
        alg_params = {
            'INPUT': outputs['CreateSpatialIndex_riskdata_2']['OUTPUT'],
            'OVERLAY': outputs['CreateSpatialIndex_osmbuildings']['OUTPUT'],
            'OUTPUT': create_rand_fname("vector", "Clip_step_17")
        }
        outputs['Clip_osm_risk'] = processing.run('native:clip', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
 
        feedback.setCurrentStep(17)
        if feedback.isCanceled():
            return {}

        # Create spatial index
        alg_params = {
            'INPUT': outputs['Clip_microsoft_risk']['OUTPUT']
        }
        outputs['CreateSpatialIndex_microsoft_risk'] = processing.run('native:createspatialindex', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
 
        feedback.setCurrentStep(18)
        if feedback.isCanceled():
            return {}

        # Create spatial index
        alg_params = {
            'INPUT': outputs['Clip_osm_risk']['OUTPUT']
        }
        outputs['CreateSpatialIndex_osm_risk'] = processing.run('native:createspatialindex', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
 
        feedback.setCurrentStep(19)
        if feedback.isCanceled():
            return {}

        # Field calculator
        alg_params = {
            'FIELD_LENGTH': 10,
            'FIELD_NAME': 'OSMArea',
            'FIELD_PRECISION': 3,
            'FIELD_TYPE': 0,  # Decimal (double)
            'FORMULA': ' $area ',
            'INPUT': outputs['CreateSpatialIndex_osm_risk']['OUTPUT'],
            'OUTPUT': create_rand_fname("vector", "FieldCalculator")
        }
        outputs['FieldCalculator_osm_risk'] = processing.run('native:fieldcalculator', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
 
        feedback.setCurrentStep(20)
        if feedback.isCanceled():
            return {}

        # Join attributes by location
        alg_params = {
            'DISCARD_NONMATCHING': False,
            'INPUT': outputs['CreateSpatialIndex_riskdata_2']['OUTPUT'],
            'JOIN': outputs['FieldCalculator_osm_risk']['OUTPUT'],
            'JOIN_FIELDS': ['OSMArea'],
            'METHOD': 0,  # Create separate feature for each matching feature (one-to-many)
            'PREDICATE': [0],  # intersect
            'PREFIX': '',
            'OUTPUT': create_rand_fname("vector", "JoinAttributesByLocation_step_21")
        }
        outputs['JoinAttributesByLocation_osm_risk'] = processing.run('native:joinattributesbylocation', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
 
        feedback.setCurrentStep(21)
        if feedback.isCanceled():
            return {}

        # Field calculator
        alg_params = {
            'FIELD_LENGTH': 10,
            'FIELD_NAME': 'BaseArea',
            'FIELD_PRECISION': 3,
            'FIELD_TYPE': 0,  # Decimal (double)
            'FORMULA': ' $area ',
            'INPUT': outputs['CreateSpatialIndex_microsoft_risk']['OUTPUT'],
            'OUTPUT': create_rand_fname("vector", "FieldCalculator_step_22")
        }
        outputs['FieldCalculator_microsoft_risk'] = processing.run('native:fieldcalculator', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
 
        feedback.setCurrentStep(22)
        if feedback.isCanceled():
            return {}

        # Update field
        alg_params = {
            'EXISTANT': 'OSMArea',
            'FILTRE': '',
            'FORMULE': 'if(OSMArea is NULL, 0, OSMArea)',
            'INPUT': outputs['JoinAttributesByLocation_osm_risk']['OUTPUT'],
            'PRECISION': 15,
            'TAILLE': 20,
            'TYPE': 1,  # Double
        }
        outputs['UpdateField_OSM'] = processing.run('Networks:update_field', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
 
        feedback.setCurrentStep(23)
        if feedback.isCanceled():
            return {}

        # Join attributes by location
        alg_params = {
            'DISCARD_NONMATCHING': False,
            'INPUT': outputs['JoinAttributesByLocation_osm_risk']['OUTPUT'],
            'JOIN': outputs['FieldCalculator_microsoft_risk']['OUTPUT'],
            'JOIN_FIELDS': ['BaseArea'],
            'METHOD': 0,  # Create separate feature for each matching feature (one-to-many)
            'PREDICATE': [0],  # intersect
            'PREFIX': '',
            'OUTPUT': create_rand_fname("vector", "JoinAttributesByLocation_step_24")
        }
        outputs['JoinAttributesByLocation_osm_microsoft'] = processing.run('native:joinattributesbylocation', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
 
        feedback.setCurrentStep(24)
        if feedback.isCanceled():
            return {}

        # Update field
        alg_params = {
            'EXISTANT': 'BaseArea',
            'FILTRE': '',
            'FORMULE': 'if(BaseArea is NULL, 0, BaseArea)',
            'INPUT': outputs['JoinAttributesByLocation_osm_microsoft']['OUTPUT'],
            'PRECISION': 15,
            'TAILLE': 20,
            'TYPE': 1,  # Double
        }
        outputs['UpdateField_osm_microsoft'] = processing.run('Networks:update_field', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
 
        feedback.setCurrentStep(25)
        if feedback.isCanceled():
            return {}

        # Field calculator
        alg_params = {
            'FIELD_LENGTH': 10,
            'FIELD_NAME': 'OSMGaps',
            'FIELD_PRECISION': 3,
            'FIELD_TYPE': 0,  # Decimal (double)
            'FORMULA': 'BaseArea - OSMArea',
            'INPUT': outputs['JoinAttributesByLocation_osm_microsoft']['OUTPUT'],
            'OUTPUT': create_rand_fname("vector", "FieldCalculator_step_26")
        }
        outputs['FieldCalculator_osm_microsoft'] = processing.run('native:fieldcalculator', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
 
        feedback.setCurrentStep(26)
        if feedback.isCanceled():
            return {}

        # Update field
        alg_params = {
            'EXISTANT': 'OSMGaps',
            'FILTRE': '',
            'FORMULE': 'if(OSMGaps <0, 0, OSMGaps)',
            'INPUT': outputs['FieldCalculator_osm_microsoft']['OUTPUT'],
            'PRECISION': 15,
            'TAILLE': 20,
            'TYPE': 1,  # Double
        }
        outputs['UpdateField_osm_microsoft_no_gap'] = processing.run('Networks:update_field', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
 
        feedback.setCurrentStep(27)
 
        if feedback.isCanceled():
            return {}
 

        # Field calculator
        alg_params = {
            'FIELD_LENGTH': 0,
            'FIELD_NAME': 'GapLevel',
            'FIELD_PRECISION': 0,
            'FIELD_TYPE': 1,  # Integer (32 bit)
            'FORMULA': '(OSMGaps/maximum(OSMGaps))*5',
            'INPUT': outputs['FieldCalculator_osm_microsoft']['OUTPUT'],
            'OUTPUT': create_rand_fname("vector", "FieldCalculator_step_28")
        }
        outputs['FieldCalculator_osm_microsoft_no_gap'] = processing.run('native:fieldcalculator', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
 
        feedback.setCurrentStep(28)
        if feedback.isCanceled():
            return {}

        # Field calculator
        alg_params = {
            'FIELD_LENGTH': 0,
            'FIELD_NAME': 'PrioLevel',
            'FIELD_PRECISION': 0,
            'FIELD_TYPE': 1,  # Integer (32 bit)
            'FORMULA': '(VALUE + GapLevel)/2',
            'INPUT': outputs['FieldCalculator_osm_microsoft_no_gap']['OUTPUT'],
            'OUTPUT': parameters['MappingPriority']
        }
        outputs['FieldCalculator_priolevel'] = processing.run('native:fieldcalculator', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        results['MappingPriority'] = outputs['FieldCalculator_priolevel']['OUTPUT']
 
 
        feedback.setCurrentStep(29)
        if feedback.isCanceled():
            return {}

        # Set layer style
        alg_params = {
            'INPUT': outputs['FieldCalculator_priolevel']['OUTPUT'],
            'STYLE': parameters['output_style']
        }
        outputs['SetLayerStyle'] = processing.run('native:setlayerstyle', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
 
 

        return results

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Disaster Mapping Prioritization'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def icon(self):
        """
        Should return a QIcon which is used for your provider inside
        the Processing toolbox.
        """
        cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]
        icon = QIcon(os.path.join(os.path.join(cmd_folder, 'logo.png')))
        return icon
        
    def createInstance(self):
        return DisasterMappingPrioritizationAlgorithm()